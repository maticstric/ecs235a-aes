"""
This file containes a bunch of constants and helper functions used for AES.

It is also the location of the main function

Should be imported in aes_encrypt.py and aes_decrypt.py
"""

import math
import encrypt_aes
import decrypt_aes

SBOX = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

ISBOX = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

RCON = [
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1B, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00]
]

""" --- You can edit the variables below --- """

KEY = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
#KEY = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17]
#KEY = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f]

IV = [
    [0xed, 0x19, 0x8a, 0x91],
    [0x8e, 0xf5, 0xa9, 0xa7],
    [0xce, 0x51, 0xc5, 0x38],
    [0x05, 0xf2, 0x30, 0x31]
]

MESSAGE_ARRAY = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]
#MESSAGE_ARRAY = [0x31, 0x37, 0xf6, 0x30, 0x98, 0x07, 0xa8, 0x8d, 0xa2, 0x34, 0x32, 0x88, 0x31, 0xe0, 0x43, 0x5a, 0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31]

""" ---------------------------------------- """

KEY_LENGTH = len(KEY) // 4 # in words (32 bits)

NUMBER_OF_ROUNDS = 0 # Should depend on KEY_LENGTH. 4 -> 10, 6 -> 12, 8 -> 14

if KEY_LENGTH == 4: NUMBER_OF_ROUNDS = 10
if KEY_LENGTH == 6: NUMBER_OF_ROUNDS = 12
if KEY_LENGTH == 8: NUMBER_OF_ROUNDS = 14

def main():
    pad_message_array(MESSAGE_ARRAY)

    print('plaintext (padded) message array:')
    print_1d_hex(MESSAGE_ARRAY)

    keys = key_expansion(KEY)
    blocks = split_message_array_into_blocks(MESSAGE_ARRAY)

    encrypt_aes.encrypt_message_ecb(blocks, keys)

    print('\nciphertext message array:')
    print_1d_hex(combine_blocks_into_message_array(blocks))

    decrypt_aes.decrypt_message_ecb(blocks, keys)

    print('\ndecrypted plaintext (padded) message array:')
    print_1d_hex(combine_blocks_into_message_array(blocks))

def key_expansion(key):
    keys = []

    i = 0

    while (i < KEY_LENGTH):
        keys.append([ key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3] ])

        i += 1

    i = KEY_LENGTH

    while (i < 4 * (NUMBER_OF_ROUNDS + 1)):
        temp = keys[i - 1]
            
        if (i % KEY_LENGTH == 0):
            temp = xor_words(sub_word(rot_word(temp)), RCON[(i // KEY_LENGTH) - 1])
        elif (KEY_LENGTH > 6 and i % KEY_LENGTH == 4):
            temp = sub_word(temp)

        keys.append(xor_words(keys[i - KEY_LENGTH], temp))

        i += 1

    return keys

# OneAndZeroes padding
def pad_message_array(message_array): # message_array is array of bytes
    bytes_missing = 16 - len(message_array) % 16

    if bytes_missing > 0 and bytes_missing < 16: # if len(message_array) = 16 then bytes_missing = 16, so we need to check that bytes_missing < 16
        message_array.append(0x80)

        for i in range(bytes_missing - 1):
            message_array.append(0x00)

def split_message_array_into_blocks(message_array):
    blocks = []

    for i in range(math.ceil(len(message_array) / 16)):
        block = [[], [], [], []]

        for j in range(i * 16, (i + 1) * 16, 4):
            for k in range(4):
                block[k].append(message_array[j + k])

        blocks.append(block)

    return blocks

def combine_blocks_into_message_array(blocks):
    message_array = []

    for i in range(len(blocks)):
        block = blocks[i]

        for j in range(4):
            for k in range(4):
                message_array.append(block[k][j])

    return message_array

def sub_word(word): # word is 4 bytes, in array length 4
    sub_word = []

    for i in range(4):
        sub_word.append(SBOX[word[i]])

    return sub_word

def rot_word(word): # word is 4 bytes, in array length 4
    rot_word = []

    rot_word = word[1:] + word[:1]

    return rot_word

def xor_words(w1, w2): # word is 4 bytes, in array length 4
    xor_word = []

    for i in range(4):
        xor_word.append(w1[i] ^ w2[i])

    return xor_word

# MixColumns requires the multiplication to be done in GF(2^8). Inputs should be bytes
# Peasant's Algorithm: https://en.wikipedia.org/wiki/Finite_field_arithmetic#Rijndael's_(AES)_finite_field
def multiply_in_galois(a, b):
    p = 0 # final product

    for i in range(8): # once per bit
        if b & 1 == 1:
            p ^= a

        b = b >> 1

        carry = 1 if (a & 0x80 == 0x80) else 0

        a = a << 1

        if carry == 1:
            a ^= 0x1b

    return p % 256

# Normal printing is going to print integers in decimal. For debugging, hex is much easier
def print_2d_hex(arr):
    string = '[\n'

    for i in range(len(arr)):
        string += '  ['
        for j in range(len(arr[i])):
            string += '{:#04x}'.format(arr[i][j]) + ', '

        string = string[:-2] # remove the ', ' from last element
        string += ']\n'

    string += ']'

    print(string)

# Normal printing is going to print integers in decimal. For debugging, hex is much easier
def print_1d_hex(arr):
    string = '['

    for i in range(len(arr)):
        string += '{:#04x}'.format(arr[i]) + ', '

    string = string[:-2] # remove the ', ' from last element
    string += ']'

    print(string)

def add_round_key(state, key):
    for i in range(4):
        for j in range(4):
            # j and i flipped intentionally since it's column-major order
            state[j][i] ^= key[i][j]

if __name__=="__main__":
    main()
